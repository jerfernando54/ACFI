*** Modulo tabla hash
fmod TABLAHASH is
    pr STRING .

    sort TablaHash .

    op hashvacia : -> TablaHash [ctor] .
    op <_,_> : String String -> TablaHash [ctor ] .
    op __ : TablaHash TablaHash -> TablaHash [ctor assoc comm] .
    
endfm

*** Modulo ListaString
fmod LISTASTRING is
    pr STRING .
    
    sort ListaString .
    subsort String < ListaString .
    
    op lsvacia : -> ListaString [ctor] .
    op __ : ListaString ListaString -> ListaString [ctor assoc id: lsvacia] .
    
endfm

fmod RED is
 pr NAT .
 pr STRING .
 pr TABLAHASH .
 pr LISTASTRING .

 sorts Localizacion Sistema Contenidos Nodo Msj EstExtremo EstCentro .
 subsort Localizacion < Sistema .
 *** Define los subtipos entre Contenidos y Nodo y Msj
 subsort Nodo Msj < Contenidos . 

 op none : -> Sistema [ctor] .
 op {_|_} : Nat Contenidos -> Localizacion [ctor] .
 op __ : Sistema Sistema -> Sistema [ctor assoc comm id: none] .

 *** Estados Nodos
 ops ninactivo nactivo esperando : -> EstExtremo [ctor] .
 ops cinactivo cactivo : -> EstCentro [ctor] .

 *** Termina de definir constructores
 *** NODO EXTREMO
 op [_-_|_|_|_] : String String EstExtremo ListaString String -> Nodo [ctor] .

 *** NODO CENTRO
 op [_-_|_] : String TablaHash EstCentro -> Nodo [ctor] .

 *** MENSAJE "INFO"
 op info<_;_;_> : Nat Nat String -> Msj [ctor] .

 *** MENSAJE "RESPUESTA INFO"
 op <_> : String -> Msj [ctor] .

 *** MENSAJE "TO_:_"
 op to[_:_] : String String -> Msj [ctor] .


 op <__> : Nodo Msj -> Contenidos [ctor] .
 op __ : Contenidos Contenidos -> Contenidos [ctor assoc comm] .
 
 *** Declaracion de variables
 var M : Msj .
 var ND : Nodo .
 var S : String .
 vars N : Nat .
 vars C C' : Contenidos .
 var LOC : Localizacion .
 var SIS : Sistema .

*** Contar cuantos nodos tiene un sistema
 op numNodos : Sistema -> Nat .
 eq numNodos(none) = 0 .
 
 ***eq numNodos({ N | < ND M > } ND L) = 1 + numNodos(L) .
 *** eq numNodos({ N | < ND M > } L) = 1 + numNodos(L) .
 eq numNodos(LOC SIS) = 1 + numNodos(SIS) .

endfm

mod COMPORTAMIENTO is
 *** Importa los modulos correspondientes

 *** Define el comportamiento de la red mediante reglas
endm

mod EJEMPLO is
 *** Importa los modulos correspondientes
 pr RED .

 op init : -> Sistema .

 *** PRUEBA: SISTEMA BASICO
 ***eq init = { 0 | ["Z" - hashvacia | cactivo] }
 ***          { 1 | ["A" - "Z" | nactivo | "B" "C" | "Hola Mundo 1"] }
 ***          { 2 | ["B" - "Z" | nactivo | "A" "C" | "Hola Mundo 2"] }
 ***          { 3 | ["C" - "Z" | ninactivo | "A" "B" | "Hola Mundo 3"] } .

 *** PRUEBA: SISTEMA BASICO CON MENSAJES
 eq init = { 0 | ["Z" - hashvacia | cactivo] }
           { 1 | ["A" - "Z" | nactivo | "B" "C" | "Hola Mundo 1"] info< 0 ; 3 ; "A" > }
           { 2 | ["B" - "Z" | nactivo | "A" "C" | "Hola Mundo 2"] < "C" > }
           { 3 | ["C" - "Z" | ninactivo | "A" "B" | "Hola Mundo 3"] to[ "A" : "Baby Shark" ] } .

 *** Define un t√©rmino inicial sobre el que probar las propiedades siguiendo el enunciado
 *** red init = { 0 | ... }
 ***            { 1 | ... }
 ***            ...
endm

rew init .

rew numNodos(init) .

*** search init ...

load model-checker

mod PROPS is
 *** Importa los modulos correspondientes

 *** Define las propiedades
endm

mod TEST is
 *** Importa los modulos correspondientes
endm

eof

*** Define y comprueba las propiedades

red modelCheck(init, ...) .