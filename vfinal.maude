*** Modulo tabla hash
fmod TABLAHASH is
    pr STRING .
    sort  TablaHash .

    op thv : -> TablaHash [ctor] .
    op hash<_,_> : String Nat -> TablaHash [ctor ] .
    op __ : TablaHash TablaHash -> TablaHash [ctor assoc comm id: thv] .

    ***Definiendo variables
    vars N : Nat .
    vars S : String .
    vars TH : TablaHash .

    ***Funcion actualizar la TablaHash
    op actualizarTHash : String Nat TablaHash -> TablaHash .
    eq actualizarTHash(S, N, TH) = TH hash< S, N > .

endfm

*** Modulo ListaAmigos
fmod LISTAAMIGOS is
    pr STRING .
    sort ListaAmigos .
    subsort String < ListaAmigos .
    
    op lav : -> ListaAmigos [ctor] .
    op __ : ListaAmigos ListaAmigos -> ListaAmigos [ctor assoc id: lav] .

    var AMIGO : String .
    var LAMIGOS : ListaAmigos .
    
endfm

fmod RED is
 pr NAT .
 pr STRING .
 pr TABLAHASH .
 pr LISTAAMIGOS .

 sorts Localizacion Sistema Contenidos Nodo Msj NodeState .
 subsort Localizacion < Sistema .

 *** Define los subtipos entre Contenidos y Nodo y Msj
 subsort Nodo < Contenidos . 
 subsort Msj < Contenidos .

 op none : -> Sistema [ctor] .
 op {_|_} : Nat Contenidos -> Localizacion [ctor] .
 op __ : Sistema Sistema -> Sistema [ctor assoc comm id: none] .

 *** Estados Nodos
 ops nodoInactivo nodoActivo nodoEsperando : -> NodeState [ctor] .

 *** Termina de definir constructores
 *** NODO EXTREMO
 op [_-_|_|_|_] : String Nat NodeState ListaAmigos String -> Nodo [ctor] .

 *** NODO CENTRO
 op [_-_|_] : String TablaHash NodeState -> Nodo [ctor] .

 *** MENSAJE "INFO"
 op info<_|_|_> : Nat Nat String -> Msj [ctor] .

 *** MENSAJE "RESPUESTA INFO"
 op respuesta-info<_> : String -> Msj [ctor] .

 *** MENSAJE "TO_:_"
 op to_:_ : String String -> Msj [ctor] .


 op cvacio : -> Contenidos [ctor] .
 op __ : Contenidos Contenidos -> Contenidos [ctor assoc comm id: cvacio] .
 
 *** Declaracion de variables
 var SIS : Sistema .
 var LOC : Localizacion .

*** Contar numeros de nodos de un sistema
 op numNodos : Sistema -> Nat .
 eq numNodos(none) = 0 .
 eq numNodos(LOC SIS) = 1 + numNodos(SIS) .

endfm

mod COMPORTAMIENTO is
 *** Importa los modulos correspondientes
    pr TABLAHASH .
    pr STRING .
    pr RED .

    ***Definiendo las variables
    vars S S' : Sistema .
    var NodeState : NodeState .
    vars AMIGOS : ListaAmigos .
    vars IDLOC IDLOCCENTRO VALOR : Nat .
    vars IDNODO IDNODO' CLAVE : String .
    var THASH THASH' : TablaHash .
    vars MSGREC AMG MSGREC' : String .
    vars CONTENIDO CONTENIDO' : Contenidos .

 *** Define el comportamiento de la red mediante reglas
 *** 7- Cuando en na misma localizacion tenemos un mensaje y el nodo al que va dirigido el mensaje se procesa
 *** 8- Cuando un mensaje va dirigido a un nodo en otra localizacion tenemos las siguientes opciones:
            *** Cada una se corresponde con una regla diferente
            *** Opcion 1- Los extremos mandan su mensaje al centro
            *** Opcion 2- El centro usa su tabla hash para enviar el mensaje a la localizacion correcta

 *** 9- Los extremos en un estado inactivo generan el mensaje info para indicar su direccion y su nombre .
 *** Al generarlo pasan al estado esperando.
    rl [extremo-genera-info] : 
            { IDLOC | [ IDNODO - IDLOCCENTRO | nodoInactivo | AMIGOS | MSGREC ] CONTENIDO } 
            => 
            { IDLOC | [ IDNODO - IDLOCCENTRO | nodoEsperando | AMIGOS | MSGREC ] info< IDLOCCENTRO | IDLOC | IDNODO > CONTENIDO } .

*** El mensaje es enviado hacia el nodo centro
    rl [extremo-envia-info-al-centro] : 
            { IDLOCCENTRO | [ IDNODO' - THASH | NodeState ] CONTENIDO' }
            { IDLOC | [ IDNODO - IDLOCCENTRO | nodoEsperando | AMIGOS | MSGREC ] info< IDLOCCENTRO | IDLOC | IDNODO > CONTENIDO }
            =>
            { IDLOCCENTRO | [ IDNODO' - THASH | NodeState ] info< IDLOCCENTRO | IDLOC | IDNODO > CONTENIDO' }
            { IDLOC | [ IDNODO - IDLOCCENTRO | nodoEsperando | AMIGOS | MSGREC ] CONTENIDO } .


 *** 10- Cuando este mensaje es recibido por el centro se utiliza para actualizar la tabla. En la misma regla el centro
 ***     envia respuesta-info al extremo como respuesta. Ademas, el centro pasa de inactivo a activo en cuanto recibe uno de estos mensajes .
     rl [centro-recibe-msj-info] : 
            { IDLOCCENTRO | [ IDNODO' - THASH | NodeState ] info< IDLOCCENTRO | IDLOC | IDNODO > CONTENIDO' } 
            => 
            { IDLOCCENTRO | [ IDNODO' - actualizarTHash(IDNODO, IDLOC, THASH) | nodoActivo ] respuesta-info< IDNODO > CONTENIDO' } .

      rl [centro-envia-msj-info] : 
            { IDLOCCENTRO | [ IDNODO' - THASH | nodoActivo ] respuesta-info< IDNODO > CONTENIDO' }
            { IDLOC | [ IDNODO - IDLOCCENTRO | NodeState | AMIGOS | MSGREC ] CONTENIDO }
            =>
            { IDLOCCENTRO | [ IDNODO' - THASH | nodoActivo ] CONTENIDO' }
            { IDLOC | [ IDNODO - IDLOCCENTRO | NodeState | AMIGOS | MSGREC ] respuesta-info< IDNODO > CONTENIDO } .

 *** 11- Cuando un extremo recibe un mensage respuesta-info, actualiza su estado y pasa a activo.
      rl [extremo-recibe-msj-respuesta-info] : 
            { IDLOC | [ IDNODO - IDLOCCENTRO | NodeState | AMIGOS | MSGREC ] respuesta-info< IDNODO > CONTENIDO } 
            =>
            { IDLOC | [ IDNODO - IDLOCCENTRO | nodoActivo | AMIGOS | MSGREC ] CONTENIDO } .

 *** 12- Los Nodos com amigos mandan mensaje to_:_ a dichos amigos diciendoles "hola". Asegurate de que solo manden uno de estos
 *** mensajes a cada amigo (es valido borrar amigos de la lista)
      rl [extremo-envia-msj-to-amigos] : 
            { IDLOC | [ IDNODO - IDLOCCENTRO | nodoActivo | AMG AMIGOS | MSGREC ] CONTENIDO }
            =>
            { IDLOC | [ IDNODO - IDLOCCENTRO | nodoActivo | AMIGOS | MSGREC ] (to AMG : "hola ") CONTENIDO } .

      --- El mensaje debe pasar por el centro.
      rl [centro-recibe-msj-to] :
            { IDLOC | [ IDNODO - IDLOCCENTRO | NodeState | AMIGOS | MSGREC ] (to AMG : MSGREC') CONTENIDO }
            { IDLOCCENTRO | [ IDNODO' - THASH | NodeState ] CONTENIDO' }
            =>
            { IDLOC | [ IDNODO - IDLOCCENTRO | NodeState | AMIGOS | MSGREC ] CONTENIDO }
            { IDLOCCENTRO | [ IDNODO' - THASH | NodeState ] (to AMG : MSGREC') CONTENIDO' } .
      
 *** 13- Cuando un mensaje to_:_ llega a un nodo el mensaje concatena a lo que ya habiamos recibido.
      rl [extremo-recibe-msj-to] : 
            { IDLOCCENTRO | [ IDNODO' - hash< AMG, VALOR > THASH | NodeState ] (to AMG : MSGREC') CONTENIDO' }
            { VALOR | [ IDNODO - IDLOCCENTRO | NodeState | AMIGOS | MSGREC ] CONTENIDO }
            =>
            { IDLOCCENTRO | [ IDNODO' - hash< AMG, VALOR > THASH | NodeState ]  CONTENIDO' }
            { VALOR | [ IDNODO - IDLOCCENTRO | NodeState | AMIGOS | MSGREC + MSGREC' ] CONTENIDO } .

endm

*** 14
mod EJEMPLO is
 *** Importa los modulos correspondientes
 pr RED .
 pr COMPORTAMIENTO .
 op init : -> Sistema .

*** Define un tÃ©rmino inicial sobre el que probar las propiedades siguiendo el enunciado .
eq init = { 0 | [ "00" - thv | nodoInactivo] } { 1 | [ "01" - 0 | nodoInactivo | "02" "03" | "" ] }
          { 2 | [ "02" - 0 | nodoInactivo | "01" "03" | "" ] } { 3 | [ "03" - 0 | nodoInactivo | "02" "01" | "" ] } .

--- red init = { 0 | [ "00" - thv | nodoInactivo] } { 1 | [ "01" - 0 | nodoInactivo | "02" "03" | "" ] }
---           { 2 | [ "02" - 0 | nodoInactivo | "01" "03" | "" ] } { 3 | [ "03" - 0 | nodoInactivo | "02" "01" | "" ] } .

endm
rew init .

*** 15 Utiliza el comando search para comprobar que el numero de permanece invariable durante toda la ejecucion .
search [1] init =>+ SIS:Sistema s.t. numNodos(init) =/= numNodos(SIS:Sistema) .

load model-checker

mod PROPS is
 *** Importa los modulos correspondientes
 pr SATISFACTION .
 pr COMPORTAMIENTO .
 pr RED .
 subsort Sistema < State .

 var CANTNODOS : Nat .
 var ID_NODO ID_NODO_AMIGO MSGREC : String .
 vars IDLOC IDLOCCENTRO : Nat .
 var SIS : Sistema .
 var TH : TablaHash .
 var NodeState : NodeState .
 var LAMIGOS LAMIGOS' : ListaAmigos .
 var CONTENIDO : Contenidos .

 *** Define las propiedades
 op existeElNodo : String -> Prop [ctor] .
 eq SIS { IDLOC | [ID_NODO - IDLOCCENTRO | NodeState | LAMIGOS | MSGREC ] CONTENIDO } |= existeElNodo(ID_NODO) = true .
 eq SIS { IDLOC | [ ID_NODO - TH | NodeState ] } |= existeElNodo(ID_NODO) = true .

 op EsAmigoDe : String String -> Prop [ctor] .
 eq SIS { IDLOC | [ ID_NODO - IDLOCCENTRO | NodeState | ID_NODO_AMIGO LAMIGOS | MSGREC ] CONTENIDO } |= EsAmigoDe( ID_NODO, ID_NODO_AMIGO ) = true .

 op existeMsgTo : String -> Prop [ctor] .
 eq SIS { IDLOC | ( to ID_NODO : MSGREC ) CONTENIDO } |= existeMsgTo( ID_NODO ) = true .

 op cantidadDeNodos : Nat -> Prop [ctor] .
 eq SIS |= cantidadDeNodos(CANTNODOS) = numNodos(SIS) == CANTNODOS .

 op cantidadDeExtremos : Nat -> Prop [ctor] .
 eq SIS |= cantidadDeExtremos(CANTNODOS) = sd(numNodos(SIS),1) == CANTNODOS .

endm

mod TEST is
 *** Importa los modulos correspondientes
 pr LTL-SIMPLIFIER .
 pr PROPS .
 pr MODEL-CHECKER .
 pr EJEMPLO .
endm

***eof

*** Define y comprueba las propiedades

*** Comprobar la cantidad de nodos
red modelCheck(init, [] cantidadDeNodos(4)) .

*** 2- Si un nodo existe y otro lo tiene como amigo, le acaba mandando un mensaje
--- red modelCheck(init, <> (existeElNodo("01"))) .
--- red modelCheck(init, <> (EsAmigoDe("02", "01"))) .
--- red modelCheck(init, <> (existeMsgTo("01"))) . 
red modelCheck(init, [] (existeElNodo("01") /\ <> EsAmigoDe("02", "01") -> <> existeMsgTo("01"))) .

*** 3- Cualquier mensaje acaba desapareciendo
red modelCheck(init, [] <> ~ existeMsgTo("03")) .

